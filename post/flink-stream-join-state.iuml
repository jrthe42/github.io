@startuml flinl-stream-join-state 

interface JoinRecordStateView {
	void addRecord(BaseRow record);
	void retractRecord(BaseRow record);
	Iterable<BaseRow> getRecords();
}

' class JoinRecordStateViews.JoinKeyContainsUniqueKey implements JoinRecordStateView {
' 	private final ValueState<BaseRow> recordState;
' }

' class JoinRecordStateViews.InputSideHasUniqueKey implements JoinRecordStateView {
' 	// stores record in the mapping <UK, Record>
' 	private final MapState<BaseRow, BaseRow> recordState;
' 	private final KeySelector<BaseRow, BaseRow> uniqueKeySelector;	
' }

' class JoinRecordStateViews.InputSideHasNoUniqueKey implements JoinRecordStateView {
' 	//<Record, appear-times>
' 	private final MapState<BaseRow, Integer> recordState;
' }

interface OuterJoinRecordStateView extends JoinRecordStateView {
	void addRecord(BaseRow record, int numOfAssociations);
	void updateNumOfAssociations(BaseRow record, int numOfAssociations);
	Iterable<Tuple2<BaseRow, Integer>> getRecordsAndNumOfAssociations();
}

class OuterJoinRecordStateViews.JoinKeyContainsUniqueKey implements OuterJoinRecordStateView {
	private final ValueState<Tuple2<BaseRow, Integer>> recordState;
}

class OuterJoinRecordStateViews.InputSideHasUniqueKey implements OuterJoinRecordStateView {
	// stores record in the mapping <UK, <Record, associated-num>>
	private final MapState<BaseRow, Tuple2<BaseRow, Integer>> recordState;
	private final KeySelector<BaseRow, BaseRow> uniqueKeySelector;
}

class OuterJoinRecordStateViews.InputSideHasNoUniqueKey implements OuterJoinRecordStateView {
	// stores record in the mapping <Record, <appear-times, associated-num>>
	private final MapState<BaseRow, Tuple2<Integer, Integer>> recordState;
}
@enduml