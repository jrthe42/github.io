<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flink on JR&#39;s Blog</title>
    <link>https://blog.jrwang.me/tags/flink/</link>
    <description>Recent content in Flink on JR&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 19 Oct 2019 14:22:57 +0800</lastBuildDate>
    
	<atom:link href="https://blog.jrwang.me/tags/flink/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flink 源码阅读笔记（18）- Flink SQL 中的流和动态表</title>
      <link>https://blog.jrwang.me/2019/2019-10-16-flink-sourcecode-stream-and-dynamic-table/</link>
      <pubDate>Sat, 19 Oct 2019 14:22:57 +0800</pubDate>
      
      <guid>https://blog.jrwang.me/2019/2019-10-16-flink-sourcecode-stream-and-dynamic-table/</guid>
      <description>SQL 和关系代数在设计之初就针对的是静态的数据。静态数据是有界的，因此可以很容易地和表（关系）进行映射。但是对于一个不断变化的实时数据流而言，数</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（17）- Flink SQL 中的时间属性</title>
      <link>https://blog.jrwang.me/2019/2019-09-16-flink-sourcecode-sql-time-attribute.md/</link>
      <pubDate>Sun, 29 Sep 2019 20:05:03 +0800</pubDate>
      
      <guid>https://blog.jrwang.me/2019/2019-09-16-flink-sourcecode-sql-time-attribute.md/</guid>
      <description>在流计算中，时间属性承担了一个极其重要的作用，所有基于时间的操作，例如窗口操作，都需要正确获取时间信息。我们曾经在Flink 源码阅读笔记（1</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（16）- Flink SQL 的元数据管理</title>
      <link>https://blog.jrwang.me/2019/2019-09-12-flink-sourcecode-sql-catalog/</link>
      <pubDate>Sun, 15 Sep 2019 20:34:45 +0800</pubDate>
      
      <guid>https://blog.jrwang.me/2019/2019-09-12-flink-sourcecode-sql-catalog/</guid>
      <description>为了使用 SQL，一个首先需要解决的是元数据管理的问题。元数据的管理包括表的元数据和 UDF 的元数据，这使得完全使用 SQL 语句来构建实时任务成为可能。 Catalog</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（15）- Flink SQL 整体执行框架</title>
      <link>https://blog.jrwang.me/2019/flink-source-code-sql-overview/</link>
      <pubDate>Wed, 04 Sep 2019 21:31:00 +0000</pubDate>
      
      <guid>https://blog.jrwang.me/2019/flink-source-code-sql-overview/</guid>
      <description>在数据处理领域，无论是实时数据处理还是离线数据处理，使用 SQL 简化开发将会是未来的整体发展趋势。尽管 SQL 简化了使用的门槛，但是如何将 SQL 等价转换到现</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（14）- Async I/O 的实现</title>
      <link>https://blog.jrwang.me/2019/flink-source-code-async-io/</link>
      <pubDate>Sat, 27 Jul 2019 20:31:53 +0000</pubDate>
      
      <guid>https://blog.jrwang.me/2019/flink-source-code-async-io/</guid>
      <description>在使用 Flink 处理实时数据流时，经常需要和外部系统进行交互。例如，在构建实时数据仓库的时候，通常需要将消息和外部维表进行关联，以获得额外的维度数据</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（13）- 双流操作的实现</title>
      <link>https://blog.jrwang.me/2019/flink-source-code-two-stream-join/</link>
      <pubDate>Sat, 13 Jul 2019 20:18:13 +0000</pubDate>
      
      <guid>https://blog.jrwang.me/2019/flink-source-code-two-stream-join/</guid>
      <description>在使用 Flink 进行实时数据处理时，一个常用的场景是对两个流的数据进行关联。这篇文章中我们将对双流操作的底层实现机制进行分析。 Window Join and CoGroup Window Join 操作，顾名</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（12）- 时间、定时器和窗口</title>
      <link>https://blog.jrwang.me/2019/flink-source-code-time-and-window/</link>
      <pubDate>Sun, 07 Jul 2019 19:18:23 +0000</pubDate>
      
      <guid>https://blog.jrwang.me/2019/flink-source-code-time-and-window/</guid>
      <description>流式数据处理中，很多操作要依赖于时间属性进行，因此时间属性也是流式引擎能够保证准确处理数据的基石。在这篇文章中，我们将对 Flink 中时间属性和窗口的</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（11）- Checkpoint 机制和状态恢复</title>
      <link>https://blog.jrwang.me/2019/flink-source-code-checkpoint/</link>
      <pubDate>Sat, 22 Jun 2019 19:58:33 +0000</pubDate>
      
      <guid>https://blog.jrwang.me/2019/flink-source-code-checkpoint/</guid>
      <description>在上一篇文章中，我们对 Flink 状态管理相关的代码逻辑进行了分析，但为了实现任务的故障恢复以及数据一致性的效果，还需要借助于检查点（Checkpoi</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（10）- State 管理</title>
      <link>https://blog.jrwang.me/2019/flink-source-code-state/</link>
      <pubDate>Sat, 15 Jun 2019 20:11:24 +0000</pubDate>
      
      <guid>https://blog.jrwang.me/2019/flink-source-code-state/</guid>
      <description>状态 State 是 Flink 中用于构建复杂逻辑的重要组件。本文将从源码角度来分析 Flink 的状态管理是如何实现的。状态 （State）需要配合检查点（Checkpoin</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（9）- Task 的生命周期</title>
      <link>https://blog.jrwang.me/2019/flink-source-code-task-lifecycle/</link>
      <pubDate>Sun, 02 Jun 2019 19:05:03 +0000</pubDate>
      
      <guid>https://blog.jrwang.me/2019/flink-source-code-task-lifecycle/</guid>
      <description>一个 Flink Job 提交到集群中运行时，会被调度为不同的 Task。在前面的文章中，我们已经介绍了 Flink 如何根据用户的编写的程序生成调度用的执行图，如何为 Task 分</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（8）- Task 之间的数据传输</title>
      <link>https://blog.jrwang.me/2019/flink-source-code-data-exchange/</link>
      <pubDate>Sat, 25 May 2019 20:03:00 +0000</pubDate>
      
      <guid>https://blog.jrwang.me/2019/flink-source-code-data-exchange/</guid>
      <description>在这篇文章中，我们将探讨一个 Flink 作业在实际运行时，不同的 Task 之间是如何进行数据交换的。由于不同的 Task 可能并非运行在同一个 TaskManager 中，因而数据传输的过程中</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（7）- 内存管理</title>
      <link>https://blog.jrwang.me/2019/flink-source-code-memory-management/</link>
      <pubDate>Sun, 19 May 2019 14:20:53 +0000</pubDate>
      
      <guid>https://blog.jrwang.me/2019/flink-source-code-memory-management/</guid>
      <description>基于 JVM 的大数据处理分析引擎面临的一个问题是，为了高效地处理数据，有大量的数据需要保存在内存中。直接使用 JVM 堆内存来管理这些数据对象是最简单的实</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（6）- 计算资源管理</title>
      <link>https://blog.jrwang.me/2019/flink-source-code-resource-manager/</link>
      <pubDate>Sat, 11 May 2019 19:01:10 +0000</pubDate>
      
      <guid>https://blog.jrwang.me/2019/flink-source-code-resource-manager/</guid>
      <description>在 Flink 中，计算资源的是以 Slot 作为基本单位进行分配的。本文将对 Flink 中计算资源的管理机制加以分析。 Task Slot 的基本概念 我们在前面的文章中了解了 Flink 集群的启动流</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（5）- 集群启动流程</title>
      <link>https://blog.jrwang.me/2019/flink-source-code-bootstarp/</link>
      <pubDate>Sun, 05 May 2019 21:42:38 +0000</pubDate>
      
      <guid>https://blog.jrwang.me/2019/flink-source-code-bootstarp/</guid>
      <description>在 Flink 1.5.0 版本发布的时候，Flink 迎来了一个重要的改进：根据 FLIP-6 重构了 Flink 集群部署和任务处理模型，以便更好地和管理资源和调度任务，更优雅地和 Yar</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（4）- RPC</title>
      <link>https://blog.jrwang.me/2019/flink-source-code-rpc/</link>
      <pubDate>Fri, 03 May 2019 20:42:38 +0000</pubDate>
      
      <guid>https://blog.jrwang.me/2019/flink-source-code-rpc/</guid>
      <description>作为一个分布式系统，Flink 内部不同组件之间通信依赖于 RPC 机制。这篇文章将对 Flink 的 RPC 框架加以分析。 例子 先来看一个简单的例子，了解 Flink 内部的 RPC 框架</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（3）- ExecutionGraph 的生成</title>
      <link>https://blog.jrwang.me/2019/flink-source-code-executiongraph/</link>
      <pubDate>Sat, 23 Feb 2019 19:38:53 +0000</pubDate>
      
      <guid>https://blog.jrwang.me/2019/flink-source-code-executiongraph/</guid>
      <description>我们前面已经分析过 StreamGraph, JobGraph 的生成过程，这两个执行图都是在 client 端生成的。接下来我们将把目光头投向 Flink Job 运行时调度层核心的执行图 - ExecutionGr</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（2）- JobGraph 的生成</title>
      <link>https://blog.jrwang.me/2019/flink-source-code-jobgraph/</link>
      <pubDate>Sun, 17 Feb 2019 16:35:45 +0000</pubDate>
      
      <guid>https://blog.jrwang.me/2019/flink-source-code-jobgraph/</guid>
      <description>前面的文章我们介绍了 StreamGraph 的生成，这个实际上只对应 Flink 作业在逻辑上的执行计划图。Flink 会进一步对 StreamGraph 进行转换，得到另一个执行计划图，即 JobGr</description>
    </item>
    
    <item>
      <title>Flink 源码阅读笔记（1）- StreamGraph 的生成</title>
      <link>https://blog.jrwang.me/2019/flink-source-code-streamgraph/</link>
      <pubDate>Sat, 16 Feb 2019 20:42:38 +0000</pubDate>
      
      <guid>https://blog.jrwang.me/2019/flink-source-code-streamgraph/</guid>
      <description>在编写 Flink 的程序的时候，核心的要点是构造出数据处理的拓扑结构，即任务执行逻辑的 DAG。我们先来看一下 Flink 任务的拓扑在逻辑上是怎么保存的。 StreamExecutionEnvironment StreamExecutionEnvironment 是 Flink</description>
    </item>
    
    <item>
      <title>Flink 的状态管理和检查点机制</title>
      <link>https://blog.jrwang.me/2017/flink-state-checkpoint/</link>
      <pubDate>Wed, 20 Sep 2017 20:18:16 +0000</pubDate>
      
      <guid>https://blog.jrwang.me/2017/flink-state-checkpoint/</guid>
      <description>从状态说起 状态 (State) 是 Flink 程序中构建复杂逻辑的基本组件。流处理中的状态可以视作算子上的记忆能力，可以保留和已经处理完的输入相关的信息，并对后续输入</description>
    </item>
    
  </channel>
</rss>